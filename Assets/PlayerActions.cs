//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""move"",
            ""id"": ""8b74050b-3e82-4827-af29-1a7b01165858"",
            ""actions"": [
                {
                    ""name"": ""click"",
                    ""type"": ""Button"",
                    ""id"": ""beedeaf8-dd26-4d3f-a6a9-5c126654172c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""position"",
                    ""type"": ""Value"",
                    ""id"": ""b2b2bd51-0295-4025-b08f-2a4efa7def1e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42f83b92-5d3e-419d-af63-777f3661079f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9f02c29-6ed8-483d-b7ab-d8c8e6d26d49"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Jump"",
            ""id"": ""5fcc6963-31e7-429c-bb26-0e3e618a5b06"",
            ""actions"": [
                {
                    ""name"": ""salto"",
                    ""type"": ""Button"",
                    ""id"": ""c3c449cd-2d3c-4087-beaa-c2f4ecb7e841"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f2e90282-01fe-4c14-acde-83e9be751a9e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""salto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // move
        m_move = asset.FindActionMap("move", throwIfNotFound: true);
        m_move_click = m_move.FindAction("click", throwIfNotFound: true);
        m_move_position = m_move.FindAction("position", throwIfNotFound: true);
        // Jump
        m_Jump = asset.FindActionMap("Jump", throwIfNotFound: true);
        m_Jump_salto = m_Jump.FindAction("salto", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // move
    private readonly InputActionMap m_move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_move_click;
    private readonly InputAction m_move_position;
    public struct MoveActions
    {
        private @PlayerActions m_Wrapper;
        public MoveActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @click => m_Wrapper.m_move_click;
        public InputAction @position => m_Wrapper.m_move_position;
        public InputActionMap Get() { return m_Wrapper.m_move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @click.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnClick;
                @click.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnClick;
                @click.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnClick;
                @position.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnPosition;
                @position.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnPosition;
                @position.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @click.started += instance.OnClick;
                @click.performed += instance.OnClick;
                @click.canceled += instance.OnClick;
                @position.started += instance.OnPosition;
                @position.performed += instance.OnPosition;
                @position.canceled += instance.OnPosition;
            }
        }
    }
    public MoveActions @move => new MoveActions(this);

    // Jump
    private readonly InputActionMap m_Jump;
    private IJumpActions m_JumpActionsCallbackInterface;
    private readonly InputAction m_Jump_salto;
    public struct JumpActions
    {
        private @PlayerActions m_Wrapper;
        public JumpActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @salto => m_Wrapper.m_Jump_salto;
        public InputActionMap Get() { return m_Wrapper.m_Jump; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumpActions set) { return set.Get(); }
        public void SetCallbacks(IJumpActions instance)
        {
            if (m_Wrapper.m_JumpActionsCallbackInterface != null)
            {
                @salto.started -= m_Wrapper.m_JumpActionsCallbackInterface.OnSalto;
                @salto.performed -= m_Wrapper.m_JumpActionsCallbackInterface.OnSalto;
                @salto.canceled -= m_Wrapper.m_JumpActionsCallbackInterface.OnSalto;
            }
            m_Wrapper.m_JumpActionsCallbackInterface = instance;
            if (instance != null)
            {
                @salto.started += instance.OnSalto;
                @salto.performed += instance.OnSalto;
                @salto.canceled += instance.OnSalto;
            }
        }
    }
    public JumpActions @Jump => new JumpActions(this);
    public interface IMoveActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
    public interface IJumpActions
    {
        void OnSalto(InputAction.CallbackContext context);
    }
}
